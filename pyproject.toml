# The contents of this file is mostly based on https://github.com/home-assistant/core/blob/dev/pyproject.toml

[tool.ruff]
target-version = "py313"
line-length = 150

[tool.ruff.lint]
select = ["ALL"]

ignore = [
    "ASYNC109", # Async function definition with a `timeout` parameter Use `asyncio.timeout` instead
    "ASYNC110", # Use `asyncio.Event` instead of awaiting `asyncio.sleep` in a `while` loop
    "D202",     # No blank lines allowed after function docstring
    "D203",     # 1 blank line required before class docstring
    "D213",     # Multi-line docstring summary should start at the second line
    "D406",     # Section name should end with a newline
    "D407",     # Section name underlining
    "E501",     # line too long

    "PLC1901", # {existing} can be simplified to {replacement} as an empty string is falsey; too many false positives
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "PT011",   # pytest.raises({exception}) is too broad, set the `match` parameter or use a more specific exception
    "PT018",   # Assertion should be broken down into multiple parts
    "RUF001",  # String contains ambiguous unicode character.
    "RUF002",  # Docstring contains ambiguous unicode character.
    "RUF003",  # Comment contains ambiguous unicode character.
    "RUF015",  # Prefer next(...) over single element slice
    "SIM102",  # Use a single if statement instead of nested if statements
    "SIM103",  # Return the condition {condition} directly
    "SIM108",  # Use ternary operator {contents} instead of if-else-block
    "SIM115",  # Use context handler for opening files

    # Moving imports into type-checking blocks can mess with pytest.patch()
    "TC001", # Move application import {} into a type-checking block
    "TC002", # Move third-party import {} into a type-checking block
    "TC003", # Move standard library import {} into a type-checking block

    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY400", # Use `logging.exception` instead of `logging.error`
    # Ignored due to performance: https://github.com/charliermarsh/ruff/issues/2923
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`

    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",

    # Disabled because ruff does not understand type of __all__ generated by a function
    "PLE0605",

    # Disabled because considered not relevant by myself
    "FBT",
    "S311",
    "G004",
    "DTZ005",
    "EM101",
    "D105",
    "D107",
    "RUF012",
    "BLE001",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
log_format = "%(asctime)s.%(msecs)03d %(levelname)-8s %(threadName)s %(name)s:%(filename)s:%(lineno)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
addopts = "--cov=ble_adv --cov-fail-under=62 " # --cov-report html "
